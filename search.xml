<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo部署出现错误err：Error：Spawn failed解决方法</title>
    <url>/blog/2021/11/30/Hexo%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AFerr/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>Hexo部署过程中可能会出现错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;&lt;http://github.com/mint-mints/blog.git/&gt;&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno 10054 </span><br><span class="line">FATAL &#123;                                                                                                                  </span><br><span class="line">	err: Error: Spawn failed                                                                                                   </span><br><span class="line">		at ChildProcess.&lt;anonymous&gt; (E:\\Docs\\Blog\\blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)                              </span><br><span class="line">		at ChildProcess.emit (events.js:400:28)                                                                                </span><br><span class="line">		at ChildProcess.cp.emit (E:\\Docs\\Blog\\blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)                               </span><br><span class="line">		at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;                                          </span><br><span class="line">	code: 128                                                                                                            </span><br><span class="line">	&#125;                                                                                                                    </span><br><span class="line">&#125; Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: %s &lt;https://hexo.io/docs/troubleshooting.html&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: &lt;https://hexo.io/docs/one-command-deployment&gt;</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: &lt;https://github.com/mint-mints/blog.git&gt; =&gt; git@github.com:mint-mints/blog.git  <span class="comment">#你的仓库地址</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>然后重新生成页面并部署就可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Error Record</tag>
      </tags>
  </entry>
  <entry>
    <title>ImportError：libcublas.so.8.0：cannot open shared object file</title>
    <url>/blog/2021/11/19/ImportError%EF%BC%9Alibcublas.so.8.0_cannot_open_shared_object_file/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ImportError: libcublas.so.8.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>tensorflow和已安装的cuda版本不匹配</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="1-查看已安装cuda版本"><a href="#1-查看已安装cuda版本" class="headerlink" title="1. 查看已安装cuda版本"></a>1. 查看已安装cuda版本</h2><p>有三种方法可以查看：</p>
<p>（1）输入命令查看版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure>

<p>（2）输命令查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll /usr/<span class="built_in">local</span>/cuda*</span><br></pre></td></tr></table></figure>

<p>（3）进入/usr/local/cuda文件夹下打开version.txt，查看版本信息。</p>
<h2 id="2-查看cuda和tensorflow的版本对应关系"><a href="#2-查看cuda和tensorflow的版本对应关系" class="headerlink" title="2. 查看cuda和tensorflow的版本对应关系"></a>2. 查看cuda和tensorflow的版本对应关系</h2><p>官网上有对应的说明：<a href="https://tensorflow.google.cn/install/source#linux">https://tensorflow.google.cn/install/source#linux</a></p>
<h2 id="3-安装并切换对应版本的cuda"><a href="#3-安装并切换对应版本的cuda" class="headerlink" title="3. 安装并切换对应版本的cuda"></a>3. 安装并切换对应版本的cuda</h2>]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中Argument list too long解决方法</title>
    <url>/blog/2021/11/16/Linux%E4%B8%ADArgument-list-too-long%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>Linux下使用<code>cp，mv，rm</code>等命令时经常会碰到“Argument list too long”错误，这主要是因为这些命令的参数太长，即文件个数过多。</p>
<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h3 id="解决方法1："><a href="#解决方法1：" class="headerlink" title="解决方法1："></a>解决方法1：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find <span class="built_in">test</span>/ -name <span class="string">&quot;*.jpg&quot;</span> | xargs -i cp &#123;&#125; train</span><br></pre></td></tr></table></figure>

<p><code>find test/ -name &quot;*.jpg&quot;</code>是指在<code>test</code>文件夹下查找名为<code>*.jpg</code>的文件。</p>
<p><code>xargs</code>命令是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。<code>-i</code>会将<code>xargs</code>的内容赋值给<code>&#123;&#125;</code>。</p>
<h3 id="解决方法2："><a href="#解决方法2：" class="headerlink" title="解决方法2："></a>解决方法2：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find <span class="built_in">test</span>/ -name <span class="string">&quot;*.jpg&quot;</span> -<span class="built_in">exec</span> cp &#123;&#125; train \\;</span><br></pre></td></tr></table></figure>

<p><code>-exec</code>参数后面是指执行其后面的命令，<code>-exec</code>以<code>;</code>为结尾，由于各个系统中分号的意义不同，因此用<code>\\</code>进行转义，即<code>\\;</code>，<code>&#123;&#125;</code>会被<code>find</code>find命令的结果替换。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm使用tensorflow报错：libcublas.so.10.0：cannot open shared object file：No such file or directory</title>
    <url>/blog/2021/11/30/PyCharm%E4%BD%BF%E7%94%A8tensorflow%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>PyCharm使用tensorflow-gpu报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcublas.so.10.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p>但是在PyCharm的Teminal中可以正常使用。</p>
<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在Run/Debug Configurations中设置Environment，在Environment variables中加上以下环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda/lib64</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>DeepLearning</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm Run/Debug Configurations Script Parameters 设置路径程序不识别的问题解决</title>
    <url>/blog/2021/11/30/Pycharm%20RunDebug%20Configurations%20Script%20Parameters/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在Pycharm的Run/Debug Configurations中的Parameters里，设置了路径。但是运行时始终无法识别，相对路径和绝对路径都不行，都说没有该目录。</p>
<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>表示路径的字符串两端改为<strong>双引号！</strong></p>
<p>Parameters 里出现的文件的路径必须用双引号表示，否则程序无法识别路径。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow报错：OutOfRangeError：FIFOQueue &#39;_0_input_producer&#39; is closed and has insufficient elements</title>
    <url>/blog/2021/11/30/Tensorflow%E6%8A%A5%E9%94%99%EF%BC%9AOutOfRangeError/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>Tensorflow加载图片时报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OutOfRangeError : FIFOQueue &#x27;_0_input_producer&#x27; is closed and has insufficient elements</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>因为局部变量（local variables）没有初始化，将初始化变量语句改为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.global_variables_initializer().run(session=sess)  <span class="comment"># 全局变量初始化</span></span><br><span class="line">tf.local_variables_initializer().run(session=sess)   <span class="comment"># 局部变量初始化</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>DeepLearning</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeError：&#39;module&#39; object is not callable 报错解决</title>
    <url>/blog/2021/11/30/TypeError%EF%BC%9A&#39;module&#39;%20object%20is%20not%20callable%20%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line">class A:</span><br><span class="line">     <span class="comment">#constructor</span></span><br><span class="line">     def __init__(self):</span><br><span class="line">          xxx</span><br><span class="line">     def run(self):</span><br><span class="line">          <span class="built_in">return</span> something</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">&gt;&gt;&gt; import A</span><br><span class="line">&gt;&gt;&gt; a = A()</span><br><span class="line">&gt;&gt;&gt; a.run()</span><br><span class="line"><span class="comment"># 报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;..../main.py&quot;</span>, line 5, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a = A()</span><br><span class="line">TypeError: <span class="string">&#x27;module&#x27;</span> object is not callable</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>Python导入模块的方法有两种：import module 和 from module import，区别是前者所有导入的东西使用时需加上模块名的限定，而后者不要。</p>
<p>正确的代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import A</span><br><span class="line">&gt;&gt;&gt; a = A.A()</span><br><span class="line">&gt;&gt;&gt; a.run()</span><br><span class="line">或</span><br><span class="line">&gt;&gt;&gt; from A import *</span><br><span class="line">&gt;&gt;&gt; a = A()</span><br><span class="line">&gt;&gt;&gt; a.run()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>conda list报错：TypeError：‘＜‘ not supported between instances of ‘str‘ and ‘NoneType‘</title>
    <url>/blog/2021/11/30/conda%20list%E6%8A%A5%E9%94%99%EF%BC%9ATypeError/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>安装mmcv之后,conda list就会报错:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/exceptions.py&quot;</span>, line 1062, <span class="keyword">in</span> __call__</span><br><span class="line">       <span class="built_in">return</span> func(*args, **kwargs)</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/cli/main.py&quot;</span>, line 84, <span class="keyword">in</span> _main</span><br><span class="line">       exit_code = do_call(args, p)</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/cli/conda_argparse.py&quot;</span>, line 82, <span class="keyword">in</span> do_call</span><br><span class="line">       exit_code = getattr(module, func_name)(args, parser)</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/cli/main_list.py&quot;</span>, line 142, <span class="keyword">in</span> execute</span><br><span class="line">       show_channel_urls=context.show_channel_urls)</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/cli/main_list.py&quot;</span>, line 80, <span class="keyword">in</span> print_packages</span><br><span class="line">       show_channel_urls=show_channel_urls)</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/cli/main_list.py&quot;</span>, line 45, <span class="keyword">in</span> list_packages</span><br><span class="line">       installed = sorted(PrefixData(prefix, pip_interop_enabled=True).iter_records(),</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/core/prefix_data.py&quot;</span>, line 130, <span class="keyword">in</span> iter_records</span><br><span class="line">       <span class="built_in">return</span> itervalues(self._prefix_records)</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/core/prefix_data.py&quot;</span>, line 159, <span class="keyword">in</span> _prefix_records</span><br><span class="line">       <span class="built_in">return</span> self.__prefix_records or self.load() or self.__prefix_records</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/common/io.py&quot;</span>, line 88, <span class="keyword">in</span> decorated</span><br><span class="line">       <span class="built_in">return</span> f(*args, **kwds)</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/core/prefix_data.py&quot;</span>, line 72, <span class="keyword">in</span> load</span><br><span class="line">       self._load_site_packages()</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/core/prefix_data.py&quot;</span>, line 274, <span class="keyword">in</span> _load_site_packages</span><br><span class="line">       python_record = read_python_record(self.prefix_path, af, python_pkg_record.version)</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/gateways/disk/read.py&quot;</span>, line 257, <span class="keyword">in</span> read_python_record</span><br><span class="line">       paths_tups = pydist.get_paths()</span><br><span class="line">     File <span class="string">&quot;/home/nercms/anaconda3/lib/python3.7/site-packages/conda/common/pkg_formats/python.py&quot;</span>, line 268, <span class="keyword">in</span> get_paths</span><br><span class="line">       records = sorted(concatv(records, ((pf, None, None) <span class="keyword">for</span> pf <span class="keyword">in</span> missing_pyc_files)))</span><br><span class="line">   TypeError: <span class="string">&#x27;&lt;&#x27;</span> not supported between instances of <span class="string">&#x27;str&#x27;</span> and <span class="string">&#x27;NoneType&#x27;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>按照报错的路径去找，找最后一个报错的py文件: File “/home/nercms/anaconda3/lib/python3.7/site-packages/conda/common/pkg_formats/python.py”, line 268</p>
<p>找到第268行, 改成下图所示, 把报错的地方加了个异常处理：</p>
<img src="/blog/2021/11/30/conda%20list%E6%8A%A5%E9%94%99%EF%BC%9ATypeError/1.png" class>

<p>之后，conda list就可以正常使用了。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>conda安装tensorflow报错：PackagesNotFoundError</title>
    <url>/blog/2021/11/16/conda%E5%AE%89%E8%A3%85tensorflow%E6%8A%A5%E9%94%99%EF%BC%9APackagesNotFoundError/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>conda安装tensorflow报错：PackagesNotFoundError: The following packages are not available from current channels。</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install ‐‐channel https://conda.anaconda.org/anaconda tensorflow‐gpu=1.9.0</span><br><span class="line">Collecting package metadata (current_repodata.json): <span class="keyword">done</span></span><br><span class="line">Solving environment: failed with current_repodata.json, will retry with next repodata <span class="built_in">source</span>.</span><br><span class="line">Collecting package metadata (repodata.json): <span class="keyword">done</span></span><br><span class="line">Solving environment: failed</span><br><span class="line">PackagesNotFoundError: The following packages are not available from current channels:</span><br><span class="line"></span><br><span class="line">  - tensorflow‐gpu=1.1.0</span><br><span class="line">  - ‐‐channel</span><br><span class="line">  - //conda.anaconda.org/anaconda</span><br><span class="line"></span><br><span class="line">Current channels:</span><br><span class="line">  - https://repo.anaconda.com/pkgs/main/linux-64</span><br><span class="line">  - https://repo.anaconda.com/pkgs/main/noarch</span><br><span class="line">  - https://repo.anaconda.com/pkgs/r/linux-64</span><br><span class="line">  - https://repo.anaconda.com/pkgs/r/noarch</span><br><span class="line"></span><br><span class="line">To search <span class="keyword">for</span> alternate channels that may provide the conda package you<span class="string">&#x27;re looking for, navigate to   https://anaconda.org  and use the search bar at the top of the page.</span></span><br></pre></td></tr></table></figure>



<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>更换为pip安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tensorflow-gpu==1.1.0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>DeepLearning</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>fatal error：numpy/arrayobject.h：No such file or directory compilation terminated.</title>
    <url>/blog/2021/11/30/error%EF%BC%9Anumpy-arrayobject-h/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>复现论文代码时报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal error: numpy/arrayobject.h: No such file or directory compilation terminated.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>其实numpy已经是安装的，anaconda里面有，python中import numpy也没有问题，但就是在此处报错。</p>
<p>执行以下命令，就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-numpy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title>linux中cp：omitting directory `XXX&#39; 问题解决</title>
    <url>/blog/2021/11/19/linux%E4%B8%ADcp%EF%BC%9Aomitting_directory_%60XXX&#39;_%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在linux系统中复制文件夹时提示如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp: omitting directory `XXX<span class="string">&#x27; </span></span><br></pre></td></tr></table></figure>

<p>XXX是要复制的文件夹名，出现该警告的原因是因为XXX目录下<strong>还存在文件</strong>，所以不能直接拷贝。</p>
<span id="more"></span>

<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>解决办法：使用递归拷贝，在cp命令后面加上-r参数，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r XXX <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>这里的 -r 代表递归的意思。</p>
<p>同样，当我们在linux系统下删除目录时也需要加上-r参数 ，如果目录为空，则会直接删除，如果目录非空，则会级联删除。</p>
<p>如删除XXX文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf XXX</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pip安装时报错：CANNOT UNINSTALL &#39;CERTIFI&#39;. IT IS A DISTUTILS INSTALLED PROJECT</title>
    <url>/blog/2021/11/30/pip%E5%AE%89%E8%A3%85%E6%97%B6%E6%8A%A5%E9%94%99%EF%BC%9ACANNOT%20UNINSTALL%20&#39;CERTIFI&#39;/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>使用pip进行安装时报错：</p>
<img src="/blog/2021/11/30/pip%E5%AE%89%E8%A3%85%E6%97%B6%E6%8A%A5%E9%94%99%EF%BC%9ACANNOT%20UNINSTALL%20'CERTIFI'/1.png" class>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot uninstall &#x27;certifi&#x27;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><img src="/blog/2021/11/30/pip%E5%AE%89%E8%A3%85%E6%97%B6%E6%8A%A5%E9%94%99%EF%BC%9ACANNOT%20UNINSTALL%20'CERTIFI'/2.png" class>

<p>修改pip版本后重新安装，安装成功。</p>
<p>但是会给出警告：</p>
<img src="/blog/2021/11/30/pip%E5%AE%89%E8%A3%85%E6%97%B6%E6%8A%A5%E9%94%99%EF%BC%9ACANNOT%20UNINSTALL%20'CERTIFI'/3.png" class>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch警告（UserWarning）解决</title>
    <url>/blog/2021/11/30/pytorch%E8%AD%A6%E5%91%8A%EF%BC%88UserWarning%EF%BC%89%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>pytorch训练时遇到了如下警告：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UserWarning: Argument interpolation should be of <span class="built_in">type</span> InterpolationMode instead of int. Please, use InterpolationMode enum.</span><br><span class="line">  <span class="string">&quot;Argument interpolation should be of type InterpolationMode instead of int. &quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>网上说是因为torchvision和pillow不兼容导致的，我的设备里torchvision=0.9.0 and pillow=8.3.1。</p>
<p>我把pillow降到了6.2.2，依然有warning。</p>
<p>于是降低torchvision版本，但是torchvision的版本号一般都是和pytorch绑定好的，我们需要不依赖torch来更改torchvison的版本，这可以通过以下指令实现。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install --no-deps torchvision==0.8.2</span><br></pre></td></tr></table></figure>

<p>pillow和torchvision都降版本之后，就不报警告了。</p>
<p>参考：<a href="https://blog.csdn.net/weixin_39518984/article/details/119897453">https://blog.csdn.net/weixin_39518984/article/details/119897453</a></p>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>DeepLearning</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu切换cuda版本但nvcc显示不正确的解决办法</title>
    <url>/blog/2021/11/19/ubuntu%E5%88%87%E6%8D%A2cuda%E7%89%88%E6%9C%AC%E4%BD%86nvcc%E6%98%BE%E7%A4%BA%E4%B8%8D%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<ol>
<li>在~/.bashrc 中修改好如下内容：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/usr/local/cuda/bin&quot;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;<span class="variable">$LD_LIBRARY_PATH</span>:/usr/local/cuda/lib64&quot;</span></span><br><span class="line"><span class="built_in">export</span> LIBRARY_PATH=<span class="string">&quot;<span class="variable">$LIBRARY_PATH</span>:/usr/local/cuda/lib64</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>并且完成软链接切换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/<span class="built_in">local</span>/cuda      <span class="comment">#删除之前创建的软链接</span></span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/cuda-8.0 /usr/<span class="built_in">local</span>/cuda</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>加载更新后的配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -s</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>注：此处直接使用source后，未成功更新。若使用sudo source ~/.bashrc会报错：sudo: source: command not found</p>
<ol start="3">
<li><p>使用nvcc -V查看版本，仍不起效</p>
<p>使用which nvcc，出现 /usr/local/cuda-9.0/bin/nvcc</p>
</li>
<li><p>果断在.bashrc中增加nvcc的环境目录</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/usr/local/cuda/bin/nvcc&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>再次source更新，搞定！</li>
</ol>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>DeepLearning</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>调用TensorFlow时出现FutureWarning：Passing (type, 1) or &#39;1type&#39; as a synonym of type is deprecate</title>
    <url>/blog/2021/11/30/%E8%B0%83%E7%94%A8TensorFlow%E6%97%B6%E5%87%BA%E7%8E%B0FutureWarning/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>import tensorflow总是出现报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FutureWarning: Passing (type, 1) or &#x27;1type&#x27; as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / &#x27;(1,)type&#x27;._np_quint8 = np.dtype([(&quot;quint8&quot;, np.uint8, 1)])</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>是numpy版本的问题，numpy降级就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip show numpy                   <span class="comment"># 查看当前numpy版本</span></span><br><span class="line">pip install numpy==1.16.0        <span class="comment"># 安装旧版本，会自动卸载当前版本</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>DeepLearning</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>更换cuda版本后Pychram中的terminal依旧显示旧版本问题</title>
    <url>/blog/2021/11/19/%E6%9B%B4%E6%8D%A2cuda%E7%89%88%E6%9C%AC%E5%90%8EPychram%E4%B8%AD%E7%9A%84terminal%E4%BE%9D%E6%97%A7%E6%98%BE%E7%A4%BA%E6%97%A7%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>更换cuda8.0版本，在系统的terminal中显示正常，输入nvcc -V后输出正常：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvcc -V</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2016 NVIDIA Corporation</span><br><span class="line">Built on Tue_Jan_10_13:22:03_CST_2017</span><br><span class="line">Cuda compilation tools, release 8.0, V8.0.61</span><br></pre></td></tr></table></figure>

<p>但是在pycharm的terminal中的输出还是旧版本9.0。</p>
<span id="more"></span>

<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><img src="/blog/2021/11/19/%E6%9B%B4%E6%8D%A2cuda%E7%89%88%E6%9C%AC%E5%90%8EPychram%E4%B8%AD%E7%9A%84terminal%E4%BE%9D%E6%97%A7%E6%98%BE%E7%A4%BA%E6%97%A7%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/1.png" class title="pycharm config">

<p>查看pycharm的设置，Terminal的设置中环境变量的属性。</p>
<p>发现系统环境变量中的PATH中，包含/usr/local/cuda-9.0/bin</p>
<p>可是在更换cuda版本时，已经将.bashrc中的cuda-9.0全部改为cuda，且在系统的Terminal中测试成功。</p>
<p>最后找到了是在/etc/profile中，有以下两句（哦，要命）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span>  PATH=/usr/<span class="built_in">local</span>/cuda-9.0/bin:<span class="variable">$PATH</span>　　　　</span><br><span class="line"><span class="built_in">export</span>  LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-9.0/lib64<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>将/etc/profile中配置环境变量的两句直接删除了。</p>
<p>但是重新source更新时，报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">X Error of failed request: BadName (named color or font does not exist)</span><br><span class="line">Major opcode of failed request: 140 (RANDR)</span><br><span class="line">Minor opcode of failed request: 16 (RRCreateMode)</span><br><span class="line">Serial number of failed request: 35</span><br><span class="line">Current serial number <span class="keyword">in</span> output stream: 35</span><br></pre></td></tr></table></figure>

<p>原因是/etc/profile中包含设置分辨率的两个语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xrandr --newmode <span class="string">&quot;1920x1080_60.00&quot;</span> 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync</span><br><span class="line">sudo xrandr --addmode VGA-1 <span class="string">&quot;1920x1080_60.00&quot;</span></span><br></pre></td></tr></table></figure>

<p>在开机时就加载过两个语句，现在重新加载就重名了。</p>
<p>于是选择了重启 ⇒ 成功！</p>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Error Record</tag>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04安装matlab2021.a</title>
    <url>/blog/2021/11/30/ubuntu16-04%E5%AE%89%E8%A3%85matlab2021-a/</url>
    <content><![CDATA[<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>使用R2021a_Linux.iso虚拟光驱进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir/media/matlab  <span class="comment"># 建立一个挂在目录</span></span><br><span class="line">sudo mount -o loop R2021a_Linux.iso  /media/matlab   <span class="comment"># 可以在/media/matlab中看到文件了</span></span><br></pre></td></tr></table></figure>

<p>进入挂载目录后安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./insall</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="产品选择"><a href="#产品选择" class="headerlink" title="产品选择"></a>产品选择</h1><p>毕竟MATLAB太大了，可以针对自己的专业来选择下载产品组件。</p>
<p>matlab官网提供了这些组件的解释： <a href="https://ww2.mathworks.cn/help/releases/R2019b/index.html">https://ww2.mathworks.cn/help/releases/R2019b/index.html</a> ，可以按需选择。</p>
<h1 id="快捷图标创建"><a href="#快捷图标创建" class="headerlink" title="快捷图标创建"></a>快捷图标创建</h1><p>输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /usr/share/applications/matlab.desktop   <span class="comment"># 新建一个名为matlab.desktop的文件。</span></span><br></pre></td></tr></table></figure>

<p>输入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=Matlab</span><br><span class="line">GenericName=Matlab 2010b</span><br><span class="line">Comment=Matlab:The Language of Technical Computing</span><br><span class="line">Exec=sh /usr/<span class="built_in">local</span>/MATLAB/R2021a/bin/matlab -desktop</span><br><span class="line">Icon=/usr/<span class="built_in">local</span>/MATLAB/R2021a/toolbox/nnet/nnresource/icons/matlab.png</span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Terminal=<span class="literal">false</span>     <span class="comment"># 在启动matlab时不启动终端</span></span><br><span class="line">Categories=Application;</span><br></pre></td></tr></table></figure>

<p>其中Exec和Icon的路径需要根据自己的安装位置更改。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python命名规则</title>
    <url>/blog/2021/11/30/Python%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<img src="/blog/2021/11/30/Python%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/1.png" class>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04切换cuda版本</title>
    <url>/blog/2021/11/30/ubuntu16.04%E5%88%87%E6%8D%A2cuda%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="安装并切换为cuda8-0（5-1）"><a href="#安装并切换为cuda8-0（5-1）" class="headerlink" title="安装并切换为cuda8.0（5.1）"></a>安装并切换为cuda8.0（5.1）</h1><ol>
<li>实现多版本CUDA共存的第一步，就是要将先前添加到***.bashrc文件***里的环境变量路径全部指向cuda软链接，也就是环境变量的路径里所有cuda-x.0的名字都改成cuda，如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tensorflow官方安装历程要求注意的是:配置PATH和LD_LIBRARY_PATH和CUDA_HOME环境变量.</span></span><br><span class="line"> </span><br><span class="line">sudo gedit ~/.bashrc <span class="comment">#修改配置文件（如果你用的是zsh，则需要修改 ~/.zshrc文件）</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#在文件结尾处添加或修改以前的路径</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/cuda/bin</span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=<span class="variable">$CUDA_HOME</span>:/usr/<span class="built_in">local</span>/cuda修改后要使用sour</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ol start="2">
<li><p>在官网下载cuda安装包：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p>
<p>注意下载runfile类型。此处下载CUDA Toolkit 8.0 GA2版本</p>
</li>
<li><p>安装</p>
<p>安装过程中需要注意，不要选择安装驱动且不要生成软链接</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh cuda_8.0.61_375.26_linux.run <span class="comment"># 开始安装</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># ..一堆协议说明...</span></span><br><span class="line"><span class="comment"># 直接按q退出协议说明.</span></span><br><span class="line">Important Notice</span><br><span class="line">Do you accept the previously <span class="built_in">read</span> EULA?</span><br><span class="line">accept/decline/quit: accept   <span class="comment"># 接受协议</span></span><br><span class="line"></span><br><span class="line">Install NVIDIA Accelerated Graphics Driver <span class="keyword">for</span> Linux-x86_64 375.26?</span><br><span class="line">(y)es/(n)o/(q)uit: n     <span class="comment"># 是否显卡驱动包，由于已经安装显卡驱动，选择n</span></span><br><span class="line"></span><br><span class="line">Install the CUDA 8.0 Toolkit?</span><br><span class="line">(y)es/(n)o/(q)uit: y     <span class="comment"># 是否安装工具包，选择y</span></span><br><span class="line"></span><br><span class="line">Enter Toolkit Location</span><br><span class="line"> [ default is /usr/<span class="built_in">local</span>/cuda-8.0 ]:   <span class="comment"># 工具包安装地址，默认回车即可</span></span><br><span class="line"></span><br><span class="line">Do you want to install a symbolic link at /usr/<span class="built_in">local</span>/cuda?</span><br><span class="line">(y)es/(n)o/(q)uit: n     <span class="comment"># 不添加链接**注意这个连接，如果你之前安装过另一个版本的cuda，除非你确定想要用这个新版本的cuda，否则这里就建议选no，因为指定该链接后会将cuda指向这个新的版本**</span></span><br><span class="line"></span><br><span class="line">Install the CUDA 8.0 Samples?</span><br><span class="line">(y)es/(n)o/(q)uit: y     <span class="comment"># 安装样例</span></span><br><span class="line"></span><br><span class="line">Enter CUDA Samples Location</span><br><span class="line"> [ default is /home/nercms ]:   <span class="comment"># 样例安装地址默认即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ***安装信息***</span></span><br><span class="line">Installing the CUDA Toolkit <span class="keyword">in</span> /usr/<span class="built_in">local</span>/cuda-8.0 ...</span><br><span class="line">Installing the CUDA Samples <span class="keyword">in</span> /home/nercms ...</span><br><span class="line">Copying samples to /home/nercms/NVIDIA_CUDA-8.0_Samples now...</span><br><span class="line">Finished copying samples.</span><br><span class="line"></span><br><span class="line">===========</span><br><span class="line">= Summary =</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">Driver:   Not Selected</span><br><span class="line">Toolkit:  Installed <span class="keyword">in</span> /usr/<span class="built_in">local</span>/cuda-8.0</span><br><span class="line">Samples:  Installed <span class="keyword">in</span> /home/nercms</span><br><span class="line"></span><br><span class="line">Please make sure that</span><br><span class="line"> -   PATH includes /usr/<span class="built_in">local</span>/cuda-8.0/bin</span><br><span class="line"> -   LD_LIBRARY_PATH includes /usr/<span class="built_in">local</span>/cuda-8.0/lib64, or, add /usr/<span class="built_in">local</span>/cuda-8.0/lib64 to /etc/ld.so.conf and run ldconfig as root</span><br><span class="line"></span><br><span class="line">To uninstall the CUDA Toolkit, run the uninstall script <span class="keyword">in</span> /usr/<span class="built_in">local</span>/cuda-8.0/bin</span><br><span class="line"></span><br><span class="line">Please see CUDA_Installation_Guide_Linux.pdf <span class="keyword">in</span> /usr/<span class="built_in">local</span>/cuda-8.0/doc/pdf <span class="keyword">for</span> detailed information on setting up CUDA.</span><br><span class="line"></span><br><span class="line">***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 361.00 is required <span class="keyword">for</span> CUDA 8.0 functionality to work.</span><br><span class="line">To install the driver using this installer, run the following <span class="built_in">command</span>, replacing &lt;CudaInstaller&gt; with the name of this run file:</span><br><span class="line">    sudo &lt;CudaInstaller&gt;.run -silent -driver</span><br><span class="line"></span><br><span class="line">Logfile is /tmp/cuda_install_26035.log</span><br><span class="line"><span class="comment"># ***安装完成***1</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>切换cuda版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/cuda  <span class="comment">#删除之前生成的软链接</span></span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/cuda-8.0 /usr/<span class="built_in">local</span>/cuda <span class="comment">#生成新的软链接</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>cuDNN安装</p>
<p>在官网下载cuDNN5.1：<a href="https://developer.nvidia.com/rdp/cudnn-archive%E3%80%82%E6%B3%A8%E6%84%8F%E4%B8%8B%E8%BD%BDcuda%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8C%85%E3%80%82">https://developer.nvidia.com/rdp/cudnn-archive。注意下载cuda版本对应的包。</a></p>
<p>下载完成后，进入相应的目录，解压文件。</p>
<p>然后将库文件和头文件copy到cuda目录。<strong>注意sudo cp的时候写到真实的cuda-8.0这样的路径下，不要写到cuda软链接路径，这样不影响版本对应。</strong></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda-8.0/include</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda-8.0/lib64</span><br><span class="line">sudo chmod a+r /usr/<span class="built_in">local</span>/cuda-8.0/include/cudnn.h /usr/<span class="built_in">local</span>/cuda-8.0/lib64/libcudnn*</span><br></pre></td></tr></table></figure>

<p>完成之后即可看到nvcc -V输出的cuda版本已经变成了10.0。再想切回cuda-9.0只需要再用上述指令给9.0的路径生成新的同名软链接即可。</p>
<p>PS：由于改变了cuda版本，原先安装的某些包可能出现不兼容，需要卸载重装。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>给数据集的图片打标注框（任意多边形）</title>
    <url>/blog/2021/11/30/%E7%BB%99%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%9B%BE%E7%89%87%E6%89%93%E6%A0%87%E6%B3%A8%E6%A1%86%EF%BC%88%E4%BB%BB%E6%84%8F%E5%A4%9A%E8%BE%B9%E5%BD%A2%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_txt_pt</span>(<span class="params">path_txt</span>):</span></span><br><span class="line">    lll_pt = []</span><br><span class="line">    list_class = []</span><br><span class="line">    <span class="comment"># read the label file</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path_txt, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file_label:</span><br><span class="line">        lines = (line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> file_label)</span><br><span class="line">        <span class="comment"># remove blank lines</span></span><br><span class="line">        lines = <span class="built_in">list</span>(line <span class="keyword">for</span> line <span class="keyword">in</span> lines <span class="keyword">if</span> line)</span><br><span class="line">        <span class="comment"># delete the first two lines</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;imagesource&quot;</span> <span class="keyword">in</span> lines[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">del</span> lines[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;gsd&quot;</span> <span class="keyword">in</span> lines[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">del</span> lines[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># each line contains a label box</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="comment"># ll_pt is used to store one label box</span></span><br><span class="line">            ll_pt = []</span><br><span class="line">            <span class="comment"># l_pt is used to store one point</span></span><br><span class="line">            l_pt = []</span><br><span class="line">            line = line.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># get the class name</span></span><br><span class="line">            name_class = line[<span class="number">8</span>]</span><br><span class="line">            name_class = name_class.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> cnt, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(line):</span><br><span class="line">                <span class="keyword">if</span> cnt &gt; <span class="number">7</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                num = <span class="built_in">float</span>(num)</span><br><span class="line">                l_pt.append(num)</span><br><span class="line">                <span class="keyword">if</span> <span class="number">2</span> == <span class="built_in">len</span>(l_pt):</span><br><span class="line">                    ll_pt.append(l_pt)</span><br><span class="line">                    l_pt = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># add one label box</span></span><br><span class="line">            lll_pt.append(ll_pt)</span><br><span class="line">            list_class.append(name_class)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lll_pt, list_class</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_img_labels</span>(<span class="params">dir_path</span>):</span></span><br><span class="line">    <span class="comment"># get the paths of all files in the directory</span></span><br><span class="line">    file_images = os.listdir(dir_path + <span class="string">&quot;/images&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file_img <span class="keyword">in</span> file_images:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;processing &quot;</span> + file_img)</span><br><span class="line">        <span class="comment"># load the image</span></span><br><span class="line">        img = cv2.imread(dir_path + <span class="string">&quot;/images/&quot;</span> + file_img)</span><br><span class="line">        save_path = dir_path + <span class="string">&quot;/images_with_label/&quot;</span>+ file_img</span><br><span class="line">        <span class="comment"># get the name of image</span></span><br><span class="line">        name_img = file_img.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># get the labels</span></span><br><span class="line">        lll_pt, list_class = deal_txt_pt(dir_path + <span class="string">&quot;/labelTxt/&quot;</span> + name_img + <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> cnt, ll_pt <span class="keyword">in</span> <span class="built_in">enumerate</span>(lll_pt):</span><br><span class="line">            pts = np.array(ll_pt, np.int32)</span><br><span class="line">            pts = pts.reshape((-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">            cv2.polylines(img, [pts], <span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">            pt_text = np.array(ll_pt[<span class="number">0</span>], np.int32)</span><br><span class="line">            cv2.putText(img, list_class[cnt], pt_text, cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cv2.imshow(&quot;IMG&quot;, img)</span></span><br><span class="line">        <span class="comment"># cv2.waitKey(0)</span></span><br><span class="line">        cv2.imwrite(save_path, img)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    show_img_labels(<span class="string">&quot;../DOTA_origin/train&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
